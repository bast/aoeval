use balboa;

use balboa::Point;

fn floats_are_same(f1: f64, f2: f64) -> bool {
    let d = f1 - f2;
    return d.abs() < 1.0e-7;
}

#[test]
fn undifferentiated() {
    let basis = balboa::example_basis();

    let c_to_s_matrices = balboa::cartesian_to_spherical_matrices();

    let points_bohr = vec![
        Point {
            x: -1.46254302355,
            y: 1.38973494775,
            z: 1.05509847591,
        },
        Point {
            x: -0.979723897042,
            y: -0.0182596516322,
            z: -0.202035740845,
        },
        Point {
            x: 0.606371890891,
            y: 1.15489340454,
            z: -1.6245616529,
        },
    ];

    let aos = balboa::aos_noddy(points_bohr, &basis, &c_to_s_matrices);

    // ao 1, point 1
    // ao 1, point 2
    // ao 1, point 3
    // ao 2, point 1
    // ...
    let aos_reference = vec![
        -5.077332474866332e-06,
        -4.813415168609903e-05,
        -9.444198684534347e-05,
        -0.0039168179007153464,
        -0.0322125205281358,
        -0.029769528784712045,
        0.0017211904091305233,
        -0.00021949627112260368,
        0.03143722455866482,
        0.001306742253524454,
        -0.0024286384341948813,
        -0.04422201156474274,
        -0.009570065480906397,
        0.0010309642141883748,
        -0.059230253004172624,
        0.003192798146324918,
        7.77287611713107e-05,
        -0.08798530041490867,
        -0.006101293610720681,
        -0.04318225653855095,
        0.03720942231118335,
        -0.007265674306896439,
        0.011407206610169907,
        0.08331781733611171,
        0.008786319404741609,
        0.07564687496336973,
        -0.003230082434401052,
        0.01496151378446815,
        -0.0011439362485113358,
        0.015901425215241044,
        -0.008711869795989362,
        -0.00014084163723336604,
        0.06139571044223291,
        -0.003087876706790655,
        0.0002886655321896605,
        0.04385867334675313,
        -0.008591185010291626,
        0.007975273763780948,
        0.014502779971998253,
        0.00702691038492907,
        0.042363564236727984,
        -0.04153203907103761,
        0.007998406154357254,
        -0.010334238157641824,
        0.003348174214840162,
        -0.005102864786581584,
        -0.0559531256996799,
        0.018738540901108956,
        -0.04198883331629265,
        0.0031403545302200403,
        0.003171367593486643,
        0.034457525690197346,
        0.000502269187114348,
        -0.054512493139685946,
        0.010331300718636494,
        -0.001146569233309818,
        -0.11577478702777773,
        -0.014541883483149953,
        -0.0001884128319826951,
        -0.027121481478597928,
        0.005917105674812406,
        0.05578170023626662,
        -0.06571503375249024,
        0.03309216065507327,
        -0.027650821524055298,
        0.025682729149784922,
        -0.009485212840129847,
        -0.08412937930858834,
        -0.006313700971336433,
        -0.011752293050705426,
        0.024567392630714998,
        -0.06423855525480603,
        -0.003592067180560306,
        0.11519016820373187,
        -0.028990323169279054,
        3.407953753083849e-08,
        -5.226476223205777e-06,
        -0.0002610063156184226,
        -3.7358672986733e-08,
        -9.969130636877804e-07,
        -0.00011508818975467677,
        -6.947245123624579e-09,
        2.231342943208897e-06,
        0.0011608101009216993,
        2.5942174680782685e-08,
        5.690777799300234e-07,
        0.00132577577897186,
        -5.37297588691292e-10,
        -6.724333769347996e-07,
        -0.00046168040435836397,
        2.3952840752604505e-08,
        -3.0448489629738406e-05,
        0.0010747064294467598,
        1.2226984314073409e-09,
        -9.868401794496495e-05,
        0.00043718897834750634,
        -2.3817625203685554e-08,
        4.1756013516617294e-05,
        7.230029990433549e-05,
        2.369469628260252e-09,
        0.00010914123260184807,
        0.0013679206272462397,
        -3.19596551145082e-09,
        -3.656739466376326e-05,
        0.0010520520613276692,
        1.8590069026802844e-08,
        -0.00015334696295897637,
        0.0001980877385876843,
        0.057703726467940794,
        0.20703369398656826,
        0.07039293266204034,
        -0.11432474729436803,
        -0.12756948199069462,
        0.05253322855210141,
        0.10863345156303283,
        -0.002377582405699385,
        0.10005457061155276,
        0.08247543127743061,
        -0.026306998207371455,
        -0.1407444340524625,
        -0.044901498074536264,
        0.008268046287350573,
        0.028552969797410576,
        0.03239255284916367,
        0.0017050118528792143,
        -0.07649770793485439,
        -0.011759096264421592,
        -0.11721555916414858,
        0.04210084452768407,
        -0.03408959547374166,
        0.0914826246772356,
        -0.04016479757087271,
        0.0022938320000254787,
        0.2217344818872599,
        -0.01969512637204457,
    ];

    for (&ao, &ao_reference) in aos.iter().zip(aos_reference.iter()) {
        assert!(floats_are_same(ao, ao_reference));
    }
}
