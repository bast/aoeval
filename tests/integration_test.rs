use balboa;

use balboa::Point;

fn floats_are_same(f1: f64, f2: f64) -> bool {
    let d = f1 - f2;
    return d.abs() < 1.0e-7;
}

#[test]
fn undifferentiated() {
    let basis = balboa::example_basis();

    let c_to_s_matrices = balboa::cartesian_to_spherical_matrices();

    let points_bohr = vec![
        Point {
            x: -1.46254302355,
            y: 1.38973494775,
            z: 1.05509847591,
        },
        Point {
            x: -0.979723897042,
            y: -0.0182596516322,
            z: -0.202035740845,
        },
        Point {
            x: 0.606371890891,
            y: 1.15489340454,
            z: -1.6245616529,
        },
        Point {
            x: -0.979723897042,
            y: -0.0182596516322,
            z: -0.202035740845,
        },
    ];

    let aos = balboa::aos_noddy((0, 0, 0), &points_bohr, &basis, &c_to_s_matrices);
    dbg!(&aos);

    // ao 1, point 1
    // ao 1, point 2
    // ao 1, point 3
    // ao 1, point 4
    // ao 2, point 1
    // ...
    let aos_reference = vec![
        -0.000005077332474866332,
        -0.00004813415168609903,
        -0.00009444198684534347,
        -0.00004813415168609903,
        -0.0039168179007153464,
        -0.0322125205281358,
        -0.029769528784712045,
        -0.0322125205281358,
        0.0017211904091305233,
        -0.00021949627112260368,
        0.03143722455866482,
        -0.00021949627112260368,
        0.001306742253524454,
        -0.0024286384341948813,
        -0.04422201156474274,
        -0.0024286384341948813,
        -0.009570065480906397,
        0.0010309642141883748,
        -0.059230253004172624,
        0.0010309642141883748,
        0.0031927981463249176,
        0.00007772876117131069,
        -0.08798530041490867,
        0.00007772876117131069,
        -0.00610129361072068,
        -0.04318225653855094,
        0.03720942231118335,
        -0.04318225653855094,
        -0.007265674306896439,
        0.011407206610169907,
        0.08331781733611171,
        0.011407206610169907,
        0.008786319404741609,
        0.07564687496336972,
        -0.003230082434401052,
        0.07564687496336972,
        0.01496151378446815,
        -0.0011439362485113358,
        0.01590142521524103,
        -0.0011439362485113358,
        -0.008711869795989362,
        -0.00014084163723336604,
        0.0613957104422329,
        -0.00014084163723336604,
        -0.003087876706790655,
        0.00028866553218966047,
        0.04385867334675313,
        0.00028866553218966047,
        -0.008591185010291626,
        0.007975273763780948,
        0.01450277997199826,
        0.007975273763780948,
        0.0070269103849290694,
        0.042363564236727984,
        -0.041532039071037606,
        0.042363564236727984,
        0.007998406154357254,
        -0.010334238157641824,
        0.0033481742148401654,
        -0.010334238157641824,
        -0.005102864786581585,
        -0.0559531256996799,
        0.018738540901108963,
        -0.0559531256996799,
        -0.041988833316292634,
        0.00314035453022004,
        0.003171367593486643,
        0.00314035453022004,
        0.03445752569019735,
        0.0005022691871143478,
        -0.054512493139685946,
        0.0005022691871143478,
        0.010331300718636485,
        -0.0011465692333098177,
        -0.1157747870277777,
        -0.0011465692333098177,
        -0.014541883483149956,
        -0.00018841283198269508,
        -0.0271214814785979,
        -0.00018841283198269508,
        0.0059171056748123976,
        0.05578170023626662,
        -0.06571503375249026,
        0.05578170023626662,
        0.03309216065507327,
        -0.027650821524055298,
        0.025682729149784908,
        -0.027650821524055298,
        -0.00948521284012984,
        -0.08412937930858834,
        -0.006313700971336433,
        -0.08412937930858834,
        -0.011752293050705426,
        0.024567392630714998,
        -0.06423855525480601,
        0.024567392630714998,
        -0.0035920671805603098,
        0.11519016820373186,
        -0.02899032316927906,
        0.11519016820373186,
        0.0000000340795375308385,
        -0.000005226476223205777,
        -0.0002610063156184226,
        -0.000005226476223205777,
        -0.00000003735867298673299,
        -0.0000009969130636877808,
        -0.00011508818975467677,
        -0.0000009969130636877808,
        -0.000000006947245123624582,
        0.000002231342943208897,
        0.001160810100921699,
        0.000002231342943208897,
        0.000000025942174680782678,
        0.0000005690777799300236,
        0.0013257757789718596,
        0.0000005690777799300236,
        -0.0000000005372975886912919,
        -0.0000006724333769347996,
        -0.00046168040435836397,
        -0.0000006724333769347996,
        0.000000023952840752604498,
        -0.000030448489629738406,
        0.0010747064294467598,
        -0.000030448489629738406,
        0.0000000012226984314073409,
        -0.00009868401794496492,
        0.00043718897834750634,
        -0.00009868401794496492,
        -0.000000023817625203685548,
        0.000041756013516617314,
        0.00007230029990433614,
        0.000041756013516617314,
        0.000000002369469628260253,
        0.00010914123260184804,
        0.0013679206272462397,
        0.00010914123260184804,
        -0.0000000031959655114508203,
        -0.00003656739466376327,
        0.001052052061327669,
        -0.00003656739466376327,
        0.000000018590069026802837,
        -0.00015334696295897634,
        0.0001980877385876843,
        -0.00015334696295897634,
        0.057703726467940794,
        0.20703369398656826,
        0.07039293266204034,
        0.20703369398656826,
        -0.11432474729436803,
        -0.12756948199069462,
        0.05253322855210141,
        -0.12756948199069462,
        0.10863345156303283,
        -0.002377582405699385,
        0.10005457061155276,
        -0.002377582405699385,
        0.08247543127743061,
        -0.026306998207371455,
        -0.1407444340524625,
        -0.026306998207371455,
        -0.044901498074536264,
        0.008268046287350575,
        0.02855296979741058,
        0.008268046287350575,
        0.032392552849163675,
        0.0017050118528792143,
        -0.07649770793485439,
        0.0017050118528792143,
        -0.011759096264421585,
        -0.11721555916414858,
        0.04210084452768406,
        -0.11721555916414858,
        -0.034089595473741664,
        0.09148262467723561,
        -0.04016479757087271,
        0.09148262467723561,
        0.0022938320000254787,
        0.2217344818872599,
        -0.019695126372044576,
        0.2217344818872599,
    ];

    for (&ao, &ao_reference) in aos.iter().zip(aos_reference.iter()) {
        assert!(floats_are_same(ao, ao_reference));
    }
}
